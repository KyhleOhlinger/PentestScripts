<#
    .Synopsis
    Retrieve a list of Tier 0 Groups and Members, and then find where they are allowed to log in from based on the LogonWorkstation AD Attribute

    .Description
    Uses the PowerView Functions and returns a list of Tier 0 User and Group, as well as machines which Tier 0 members have the ability to log on from. This tries to help generate a list of machines which are effectively Tier 0.
    Similar to workstation allowed in net user - Determines machines accounts are allowed to log in to
    Works if not configured through group policy - These machines will be considered Tier 0

    .PARAMETER Server
    Specifies an Active Directory server (domain controller) to bind to for the search 
    
    .EXAMPLE

    Get-Members 

    Returns members of the predefined Tier 0 groups.

    .EXAMPLE

    Get-WorkStations 

    Returns the workstations that the members of each group are restricted to.

    .EXAMPLE

    Get-WorkStations -Server fully.qualified.domain.name

    Returns the workstations that the members of each group are restricted to, based on the provided domain name.

#>

$Tier0Groups = {
    "Enterprise Admins",
    "Domain Admins",
    "DNSAdmins",
    "Schema Admins",
    "Administrators",
    "Account Operators",
    "Backup Operators",
    "Print Operators",
    "Server Operators",
    "Domain Controllers",
    "Read Only Domain Controllers",
    "Group Policy Creators Owners",
    "Cryptographic Operators",
    "Distributed COM Users"
}


function Get-Members{

    foreach ($Group in $Tier0Groups){
            Write-Host "`r`n"$Group":`r`n--------------------------`r`n"

            Get-NetGroupMember $Group | Select MemberName -Expand MemberName
    }

}

function Get-WorkStations{

    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Server
    )

    PROCESS{
        if ($PSBoundParameters['Server']) { 
            foreach ($Group in $Tier0Groups){
                Get-NetGroupMember $Group -Server $Server -Recurse | %{get-aduser -Server $Server $_.membersid -prop *} | select samaccountname,logonhours,logonworkstations,passwordlastset| Format-Table -auto
            }
        }
        else{
            foreach ($Group in $Tier0Grpups){
                Get-NetGroupMember $Group -Recurse | %{get-aduser $_.membersid -prop *} | select samaccountname,logonhours,logonworkstations,passwordlastset| Format-Table -auto -wrap
            }
        }
    }

}
