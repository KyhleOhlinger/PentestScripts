##Created by: Kyhle Ohlinger
#Available: https://github.com/KyhleOhlinger/PentestScripts/

## ABOUT:
#Nslookup is an automated scanner that can be used during network assessments in order to determine the available hosts and open ports for the given hosts.

#This will be usefule when a large number of web applications are used and the tester needs to determine the number of unique IP addresses in the range. E.g. when doing a network assessment of the web applcations.

#This will also be useful when attempting to determine which IP's in a given domain contain open ports.

## FEATURES:
#Automatically retrieve ns lookup information for the relevant web applications
#Read in the nslookup information and search for the addresses
#Automatically determine the unique IP addresses

## USAGE:
#python nslookup.py --uniq
	# Runs the script and outputs the Uniq IP addresses to the tester
#python nslookup.py --ns
	# Runs the script and returns basic nslookup information to the tester
#python nslookup.py --address
	# Runs the script and returns the IP address for each web application 
#python nslookup.py --port
	#Returns a Top1000, Full Port Scan, and explicit port scan on open ports within domain range
	#Returns a file containing IP's with closed ports
#python nslookup.py --closed
	#Returns all IP's with closed ports along with the actual closed ports
#python nslookup.py --help
	#Returns information about how to run the program

## NOTE:
#The test cases included within the L4L scripts are non-exhaustive and should only be used as building blocks during penetration assessments.

#Imports 
from template import *

#Version Information and basic initialization
global VERSION
global DIRECTORY
global FILENAME
global TargetIP
global initialURL
global SCANS
global TargetScan
global output
global ip_dict

VERSION = 1.0
SCANS = ['--uniq','--ns','--address','--port','--closed','--help']
#==============================================Basic Information=========================================

def basicInformation():
	print bcolors.WARNING + "-- --=[Llama's 4 Lyf"
	print bcolors.WARNING + "-- --=[https://github.com/KyhleOhlinger/PentestScripts/" + bcolors.ENDC
	print bcolors.WARNING + "-- --=[L4L v"+str(VERSION)+" by Kyhle Ohlinger" + bcolors.ENDC
	print bcolors.WARNING + "-- --=[Usage: "
	print ""

	for scans in SCANS:
		print "[*] python nslookup.py " + scans
	print ""

#===========================================Function Definitions========================================

#Running bash commands
def commands(command): 	
	os.system(command)

#Help Options
def showHelp():
	print bcolors.OKGREEN + "-- -------------------=[Retrieving Help Information... ]=---------------- --" + bcolors.ENDC 
	print ""
	print bcolors.OKGREEN + "--uniq: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs all available scans including, --ns and --address, and outputs the results to uniq.txt " + bcolors.ENDC
	print ""

	print bcolors.OKGREEN + "--ns: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs nslookup scans and outputs the results to ns.txt " + bcolors.ENDC
	print ""

	print bcolors.OKGREEN + "--address: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs nslookup and ouputs the addresses to address.txt " + bcolors.ENDC
	print ""

	print bcolors.OKGREEN + "--port: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs a Top1000, Full Port Scan, and explicit port scan on open ports within domain range. It also provides the tester with a file containing IP's with closed ports " + bcolors.ENDC
	print ""
	
	print bcolors.OKGREEN + "--closed: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs a script against the Top1000 ports and returns all IP's with closed ports " + bcolors.ENDC
	print ""
	
	print sys.exit()

def main():
	global SCANS
	scan = ' '.join(sys.argv[1:])
	if not scan in SCANS:
		print bcolors.OKRED + "-- --=[For more information use the --help command: python nslookup.py --help " + bcolors.ENDC
		print ""		
		sys.exit()
	elif scan == "--help":
		showHelp()
	else:
		global TargetScan 
		TargetScan = scan

def availableScans():
	global TargetScan
	if TargetScan == "--uniq":
		nsInformation()
		addressInformation()
		uniqInformation()
	elif TargetScan == "--address":
		nsInformation()
		addressInformation()
	elif TargetScan == "--ns":
		nsInformation()
	elif TargetScan == "--port":
		openPorts()
		fullPort()
		closedPorts()
		fullNmap()
	elif TargetScan == "--closed":
		openPorts()
		closedPorts()		
		
def initialize():
	print ""
	global TargetScan	
	L4L()
	basicInformation()
	main()
	retrieveTestInfo()
	if(TargetScan == "--port"):
		retrieveDomainInfo()
	else:
		retrieveFileInfo()
	availableScans()
	endArt()

#======================================Retrieve target web information===================================
def retrieveTestInfo():
	global DIRECTORY
	temp = raw_input(bcolors.WARNING + "-- --=[Enter the name of the current test: "+bcolors.ENDC)
	DIRECTORY = temp
	commands("mkdir "+DIRECTORY)

def retrieveFileInfo():
	global FILENAME
	temp = raw_input(bcolors.WARNING + "-- --=[Enter the filename containing the web application URLs: "+bcolors.ENDC)
	FILENAME = temp

def retrieveDomainInfo():
	global FILENAME
	temp = raw_input(bcolors.WARNING + "-- --=[Enter the filename containing the Domain IP's: "+bcolors.ENDC)
	FILENAME = temp

def nsInformation():
	print bcolors.OKGREEN + "-- --=[Running nslookup..."+bcolors.ENDC
	print "\n"
	global FILENAME, DIRECTORY
	lines = [line.rstrip('\n') for line in open(FILENAME)]
	print bcolors.OKRED + "When the '>' Symbol appears, type 'exit'" +bcolors.ENDC
	for i in lines:
		commands("nslookup "+str(i)+" >> "+DIRECTORY+"/ns.txt")		

#Read nslookup and get addresses
def addressInformation():
	global DIRECTORY
	print bcolors.OKGREEN + "-- --=[Retrieving Domain IP's..."+bcolors.ENDC
	print "\n"
	with open(""+DIRECTORY+"/ns.txt", "r") as f:
		searchlines = f.readlines()
		outputFile=open(""+DIRECTORY+"/address.txt","w")
		for i, line in enumerate(searchlines):
		    if "Address:" in line: 
			for l in searchlines[i:i+1]: 
				outputFile.write(l)
		outputFile.close()
	os.remove(""+DIRECTORY+"/ns.txt")

#Remove duplicate addresses
def uniqInformation():
	print bcolors.OKGREEN + "-- --=[Retrieving Unique IP's..."+bcolors.ENDC
	print "\n"
	global DIRECTORY
	outfilename=""+DIRECTORY+"/uniq.txt"
	infilename=""+DIRECTORY+"/address.txt"
	lines_seen = set()
	outfile = open(outfilename, "w")
	for line in open(infilename, "r"):
	    if line not in lines_seen:
		if "#" not in line: 
			outfile.write(line)
		lines_seen.add(line)
	outfile.close()
	os.remove(""+DIRECTORY+"/address.txt")

def openPorts(): 
	print bcolors.OKGREEN + "-- --=[Running Top1000 Scan against available domains..."+bcolors.ENDC
	print "\n"
	global FILENAME, DIRECTORY
	commands("nmap -iL "+FILENAME+" -Pn -n -vv >> "+DIRECTORY+"/Top1000.txt")
	print bcolors.OKGREEN + "-- --=[Retrieving IP's with open ports..."+bcolors.ENDC
	print "\n"
	with open(""+DIRECTORY+"/Top1000.txt", "r") as f:
		searchlines = f.readlines()
		outputFile=open(""+DIRECTORY+"/openPorts.txt","w")
		for i, line in enumerate(searchlines):
		    if "Discovered " in line: 
			for l in searchlines[i:i+1]: 
				outputFile.write(l)
		outputFile.close()
	commands("grep 'open' "+DIRECTORY+"/openPorts.txt | awk '{print $6}' | sort | uniq > "+DIRECTORY+"/uniqIPs.txt")
	print bcolors.OKGREEN + "-- --=[Retrieving Unique IP's with open ports..."+bcolors.ENDC
	print "\n"
	os.remove(""+DIRECTORY+"/openPorts.txt")

def fullPort():
	global DIRECTORY
	print bcolors.OKGREEN + "-- --=[Running full port Scan against unique IPs with open ports..."+bcolors.ENDC
	print "\n"
	commands("nmap -iL "+DIRECTORY+"/uniqIPs.txt -p- -n -Pn -vv >> "+DIRECTORY+"/fullPortScan.txt")
	with open(""+DIRECTORY+"/fullPortScan.txt", "r") as f:
		searchlines = f.readlines()
		outputFile=open(""+DIRECTORY+"/openPorts.txt","w")
		for i, line in enumerate(searchlines):
		    if "Discovered " in line: 
			for l in searchlines[i:i+1]: 
				outputFile.write(l)
		outputFile.close()
	commands("grep 'open' "+DIRECTORY+"/openPorts.txt | awk '{print $4 , $6}'| sort | uniq > "+DIRECTORY+"/portResults.txt")
	portList()
	
def portList():
	print bcolors.OKGREEN + "-- --=[Generating a list of IP's with related open ports..."+bcolors.ENDC
	print "\n"	
	global ip_dict, DIRECTORY
	with open(""+DIRECTORY+"/uniqIPs.txt") as f:
    		IPs = f.readlines()
		IPs = [x.strip() for x in IPs] 

	ip_dict = dict()

	with open(""+DIRECTORY+"/portResults.txt", "r") as f:
		searchlines = f.readlines()
		for i, line in enumerate(searchlines):
			currIP = line.split(" ",1)[1]
			currIP = currIP.strip()
			port = line.split(" ",1)[0]
			if currIP in ip_dict:
				ip_dict[currIP].append(port)
			else:
				ip_dict[currIP] = [port]
	
def fullNmap():
	global ip_dict, DIRECTORY
	commands("mkdir "+DIRECTORY+"/FullNmap")
	myStr=""
	for ip in ip_dict:
		count =0
		for x in ip_dict[ip]:
			port = ip_dict[ip][count].split("/tcp",1)[0]
			count+=1
			myStr += port + ","
		result = myStr.rstrip(',')
		print bcolors.OKGREEN + "-- --=[Running full port scan on "+ip+" using its open ports..."+bcolors.ENDC
		print "\n"
		commands("nmap -sV "+ip+" -p"+result+" --version-all -vv >> "+DIRECTORY+"/FullNmap/"+ip+"Nmap.txt")
		myStr=""
	os.remove(""+DIRECTORY+"/portResults.txt")

#From nmap Top1000 
def closedPorts():
	global DIRECTORY
	print bcolors.OKGREEN + "-- --=[Retrieving closed ports against Top1000 results..."+bcolors.ENDC
	print "\n"
	commands("cat "+DIRECTORY+"/Top1000.txt | grep -v 'All 1000\|Not shown\|SYN\|delay\|Warning\|Scanning\|Starting\|Scanned at\|files\|Raw\|REASON\|open\|Reason:\|Host is up' | awk -F '\n' -v RS='' -v ORS='\n\n' 'NF>1' | sed -e 's#^Nmap scan report for ##' | sed 's/reset.*//' >> "+DIRECTORY+"/closedPorts.txt")

#=============================================Running The Script=========================================
initialize()
#==============================================That's All Folks==========================================

