from neo4j import GraphDatabase
#Might require - sudo pip install neo4j-driver

uri = "bolt://localhost:7687"
driver = GraphDatabase.driver(uri, auth=("<USERNAME>", "<PASSWORD>"), encryption=False)

ACLs = [
    "GenericWrite",
    "GenericAll",
    "ForceChangePassword",
    "Owns",
    "FullControl",
    "WriteDacl",
    "WriteOwner",
    "WriteProperty",
    "AllExtendedRights",
    "AddMember"
]
Objects = [
        "User",
        "Group",
        "Computer"
]
global Tier0Groups,domain,check, uniqueAccounts, increaseTier0, additionalGroups
Tier0Groups = [
        "ENTERPRISE ADMINS",
        "DOMAIN ADMINS",
        "DNSADMINS",
        "SCHEMA ADMINS",
        "ADMINISTRATORS",
        "ACCOUNT OPERATORS",
        "BACKUP OPERATORS",
        "PRINT OPERATORS",
        "SERVER OPERATORS",
        "DOMAIN CONTROLLERS",
        "READ-ONLY DOMAIN CONTROLLERS",
        "GROUP POLICY CREATOR OWNERS",
        "CRYPTOGRAPHIC OPERATORS",
        "DISTRIBUTED COM USERS",
]
#Global Variables
domain = "DOMAIN.NAME"
check = True
increaseTier0 = True 
uniqueAccounts = []
additionalGroups = []

def print_acl(tx,acl,object):
    printonce = False
    for obj in range(len(Objects)):        
        for record in tx.run("MATCH (a:"+object+")-[:"+acl+"]->(u:"+Objects[obj]+") RETURN a.name,COUNT(u.name),a.enabled"):
                if str(record["a.name"]).split("@", 1)[0] not in Tier0Groups and str(record["a.name"]) not in uniqueAccounts:
                        if(printonce == False):
                                print(object +" object with "+acl+" over a "+Objects[obj]+" object:\n----------------------------------")
                                printonce=True
                        print("Account: "+record["a.name"]+"\t : Accounts Affected = "+str(record["COUNT(u.name)"]) + "\t : Account Enabled = "+str(record["a.enabled"])+"\n") 
        printonce=False

def StripTier0(tx):
        for tier0 in range(len(Tier0Groups)):
                if not check:
                        print("\n"+Tier0Groups[tier0]+"\n-------------------------------")
                for record in tx.run("MATCH (n)-[r:MemberOf]->(g:Group {name:'"+Tier0Groups[tier0].upper()+"@"+domain.upper()+"'}) RETURN n.name"):
                        if not check:
                                print(record["n.name"]) 
                        #If you want unique accounts:
                        if str(record["n.name"]) not in uniqueAccounts and str(record["n.name"]).split("@", 1)[0] not in Tier0Groups:
                                uniqueAccounts.append(str(record["n.name"]))

def GetTier0Groups(tx):
        global increaseTier0
        increaseTier0 = False
        for acc in range(len(uniqueAccounts)):
                for record in tx.run("MATCH (g:Group) where g.name='"+uniqueAccounts[acc].upper()+"' RETURN g.name"):
                        if str(record["g.name"]).split("@", 1)[0] not in Tier0Groups:
                                increaseTier0 = True
                                Tier0Groups.append(str(record["g.name"]).split("@", 1)[0])
                                additionalGroups.append(str(record["g.name"]).split("@", 1)[0])

def main(): 
        # Initial Checks
        global check
        while(increaseTier0):       
                with driver.session() as session:
                        # Retrieve Direct Tier0 Group Members 
                        session.read_transaction(StripTier0)
                        # Determine all Direct Tier0 groups - In addition to the Array of Microsoft groups
                        session.read_transaction(GetTier0Groups)
        session.close()
        check = False
        #Print Groups after Initial Checks
        with driver.session() as session:
                # Retrieve Direct Tier0 Group Members
                print("================================================================")
                print("Checking Tier 0 Group Members")
                print("================================================================")
                session.read_transaction(StripTier0)
                session.read_transaction(GetTier0Groups)
                print("\n-------------------------------\nAdditional Tier0 Groups:\n-------------------------------")
                for j in range(len(additionalGroups)):
                        print(additionalGroups[j])
                        if str(additionalGroups[j]+"@"+domain) in uniqueAccounts:
                                uniqueAccounts.remove(str(additionalGroups[j]+"@"+domain))

                print("\n-------------------------------\nUnique Tier0 Users:\n-------------------------------")
                for i in range(len(uniqueAccounts)):
                        print(uniqueAccounts[i])
        session.close()

def ACL_Checks():
        # Retrieve ACL Permissions
        with driver.session() as session:
                for obj in range(len(Objects)):
                        print("\n\n================================================================")
                        print("Checking "+Objects[obj]+" Permissions")
                        print("================================================================")
                        for i in range(len(ACLs)):
                                session.read_transaction(print_acl,ACLs[i],Objects[obj])
                        print("================================================================")

        session.close()

print("\n================================================================\n\t\t Welcome to ACL_Checker \n================================================================\n")

ACL_Out = raw_input("Do you want to generate ACL Information? [Y,N,Default=N]")      
main()
if ACL_Out == "Y" or ACL_Out == "y":
        ACL_Checks()

