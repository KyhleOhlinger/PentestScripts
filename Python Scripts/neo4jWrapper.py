from neo4j import GraphDatabase

uri = "bolt://localhost:7687"
driver = GraphDatabase.driver(uri, auth=("<username>", "<password>"))

def print_names(tx, name):
	for record in tx.run("MATCH (a:User) WHERE a.displayname Contains {name} RETURN a.displayname", name=name):
		print(record["a.displayname"])

def print_os(tx):
	for record in tx.run("MATCH (n:Computer) WHERE n.operatingsystem =~ '(?i).*(2000|2003|2008|xp|vista|me).*' "
			"AND n.enabled = true  RETURN n.name, n.operatingsystem"):
		print(record["n.name"] + "\t" + record["n.operatingsystem"])

def print_user_pass(tx):
	for record in tx.run("MATCH (n) WHERE (n.description =~ '(?i).*user.*' or "
			" n.description =~ '(?i).*pass.*') Return n.displayname, n.description"):
		print(record["n.displayname"] + "\t" + record["n.description"])

def print_username_password(tx):
	for record in tx.run("MATCH (n) WHERE (n.description =~ '(?i).*username.*' or "
			" n.description =~ '(?i).*password.*') Return n.displayname, n.description"):
		print(record["n.displayname"] + "\t" + record["n.description"])

def print_computers_sessions(tx):
	for record in tx.run("Match p=((S:Computer)-[r:HasSession]->(T:User)) with S.name as s, count(Distinct(T))" 
			" as t return {Name:s, Count: t} as MyResult Order by t desc Limit 10"):
		print(record[:])

def print_users_sessions(tx):
	for record in tx.run("Match p=((S:User)-[r:HasSession]->(T:User)) with T.name as t, count(Distinct(S))"
			" as c return {Name:t, Count: c} as MyResult Order by c desc Limit 10"):
		print(record[:])

def print_admin_rights(tx):
	for record in tx.run("Match p=((S:Computer)-[r:MemberOf|:AdminTo*1..]->(T:Computer)) With S.name as s, "
			"Count(Distinct(T)) as t Return {Name: s, Count: t} as MyResult Order by t Desc Limit 5"):
		print(record[:])

def print_own_query(tx,query):
	for record in tx.run(query):
		print(str(record[:]))

def start(option):
	with driver.session() as session:
		if(option == "1"):
			session.read_transaction(print_names, "David")
		elif(option == "2"):
			session.read_transaction(print_os)
		elif(option == "3"):
			session.read_transaction(print_user_pass)
		elif(option == "4"):
			session.read_transaction(print_username_password)
		elif(option == "5"):
			session.read_transaction(print_computer_sessions)
		elif(option == "6"):
			session.read_transaction(print_users_sessions)
		elif(option == "7"):
			session.read_transaction(print_admin_rights)
		elif(option == "8"):
			query = raw_input("Input Query: ")
			session.read_transaction(print_own_query,query)
		else:
			print("Option does not exist")

def queries():
	print("This basic wrapper has the following default queries:")
	print("1 - Query by Name")
	print("2 - Outdated Operating Systems")
	print("3 - Quiet Username and Password")
	print("4 - Noisy Username and Password")
	print("5 - Top 10 Computers with Most Sessions")
	print("6 - Top 10 Users with Most Sessions")
	print("7 - Top 5 Users with Most Admin Rights")
	print("8 - Create own Query")
	option = raw_input("Select a Option: ")
	start(option)

queries()

