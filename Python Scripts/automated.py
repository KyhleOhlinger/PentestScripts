##Created by: Kyhle Ohlinger
#Available: https://github.com/KyhleOhlinger/PentestScripts/

## ABOUT:
#Automated is an automated scanner that can be used during a web application penetration test to enumerate and scan the given application for vulnerabilities. 

#This will be useful as a starting point for the web application test. The results of which may provide useful information when attempting to exploit the application.

## FEATURES:
#Automatically retrieve website information using whatweb
#Automatically retrieve Host and Domain based information
#Automatically check HTTP headers using various cURL commands
#Automatically determine web application information using cURL commands
#Automatically check for SMB enumeration using enum4linux and nbtscan
#Automatically check for directory enumeration using Dirb
#Automatically scan ports with Nmap
#Automatically scan target with Nikto
#Automatically scan for outdated SSL/TLS headers with SSLScan
#Automatically attempt to retrieve firewall information using WafW00f

## USAGE:
# python automated.py --all 
	# Runs all availble scans
# python automated.py --host
	# Runs only host and domain information related scans
# python automated.py --scan
	# Runs only HTTP related scans
#puthon automated.py --enum
	#Runs only enumeration related scans
#python automated.py --vuln
	# Runs only automated vulnerabiltiy scans
#python automated.py --help
	#Returns information about how to run the program

## NOTE:
#The test cases included within the L4L scripts are non-exhaustive and should only be used as building blocks during penetration assessments.

### TODO ###
# Add save functionality for the various scans
# Add functionality to retrieve IP from whatweb scan
# Possibly add more ascii art
#Get url onfp
### TODO ###

##Imports
from template import *

#Version Information and basic initialization
global VERSION
global DIRECTORY
global TESTNAME
global TargetIP
global initialURL
global SCANS
global TargetScan
global output
global DOMAIN

VERSION = 1.0
DIRECTORY =""
TESTNAME =""
TargetIP =""
initialURL =""
SCANS = ['--all','--host','--scan','--enum','--vuln', '--help']
TargetScan = ""
output = [] #output.append(somestring)
DOMAIN = ""

#============================================Basic Information===========================================

def basicInformation():
	print bcolors.WARNING + "-- --=[Llama's 4 Lyf"
	print bcolors.WARNING + "-- --=[https://github.com/KyhleOhlinger/PentestScripts/" + bcolors.ENDC
	print bcolors.WARNING + "-- --=[L4L v"+str(VERSION)+" by Kyhle Ohlinger" + bcolors.ENDC
	print bcolors.WARNING + "-- --=[Usage: "
	print ""

	for scans in SCANS:
		print "[*] python automated.py " + scans
	print ""

#===========================================Function Definitions========================================
#Running Commands
def runTerminal(command,name):
	someVar = os.system(command)
	with open(DIRECTORY+name,'w') as file:
		file.write(str(someVar))
	#os.system("gnome-terminal --tab -e 'bash -c \"" + command+" > "+DIRECTORY+name+"\"'")

def commands(command): 	
	os.system(command)

#Saving Files
def saveHost():
	global output	
	print "In Host Save"
	
def saveHeaders():
	print "In Headers Save"

def saveEnum():
	print "In SMB Save"

def saveScans():
	print "In Scans Save"

#Help Options
def showHelp():
	print bcolors.OKGREEN + "-- -------------------=[Retrieving Help Information... ]=---------------- --" + bcolors.ENDC 
	print ""
	print bcolors.OKGREEN + "--all: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs all available scans, including --host, --scan, --enum, and --vuln " + bcolors.ENDC
	print ""

	print bcolors.OKGREEN + "--host: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs all scans related to retrieveing Host and Domain Information " + bcolors.ENDC
	print ""

	print bcolors.OKGREEN + "--scan: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs all scans related to retrieveing HTTP Information " + bcolors.ENDC
	print ""

	print bcolors.OKGREEN + "--enum: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs all scans related to retrieveing Enumeration Information " + bcolors.ENDC
	print ""

	print bcolors.OKGREEN + "--vuln: "+bcolors.ENDC
	print bcolors.WARNING + "\t-- --=[Runs all scans related to retrieveing Vulnerabiltiy Information " + bcolors.ENDC
	print ""
	print sys.exit()

def main():
	global SCANS
	scan = ' '.join(sys.argv[1:])
	if not scan in SCANS:
		print bcolors.OKRED + "-- --=[For more information use the --help command: python automated.py --help " + bcolors.ENDC
		print ""		
		sys.exit()
	elif scan == "--help":
		showHelp()
	else:
		global TargetScan 
		TargetScan = scan

def availableScans():
	global TargetScan
	if TargetScan == "--all":
		hostInformation()
		scanInformation()
		enumInformation()
		vulnInformation()
	elif TargetScan == "--host":
		hostInformation()
	elif TargetScan == "--scan":
		scanInformation()
	elif TargetScan == "--enum":
		enumInformation()
	elif TargetScan == "--vuln":
		vulnInformation()

def initialize():
	print ""	
	L4L()
	basicInformation()
	main()
	retrieveTestInfo()
	retrieveURL()
	retrieveWebInfo()
	availableScans()
	endArt()
#=========================================Retrieving Test Information===================================
def retrieveTestInfo():
	global TESTNAME, DIRECTORY
	temp = raw_input(bcolors.WARNING + "-- --=[Enter the name of the current test: "+bcolors.ENDC)
	TESTNAME = temp
	#userIn = raw_input(bcolors.WARNING + "-- --=[Would you like the information to be saved in a file? (Y/n) "+bcolors.ENDC)
	#if userIn == "Y":
		#DIRECTORY = TESTNAME + "/"
		#print bcolors.OKGREEN +"-- --=[Creating Directory " + bcolors.BOLD + TESTNAME +bcolors.ENDC +bcolors.OKGREEN+ " in " +os.getcwd() + "/" + bcolors.ENDC
		#if not os.path.exists(TESTNAME):
		#    os.makedirs(TESTNAME)
		#print ""
	#else:
		#print bcolors.OKRED + "-- --=[Test information will not be saved... " + bcolors.ENDC
		#print ""

def retrieveURL():
	global TESTNAME, DOMAIN
	URL = raw_input(bcolors.WARNING + "-- --=[Enter the Target URL: e.g.[http://url.com]"+bcolors.ENDC)
	print bcolors.OKGREEN + "-- --=[Current test: "+ bcolors.BOLD + TESTNAME + bcolors.ENDC + bcolors.OKGREEN + " using host: "+ bcolors.BOLD +URL +bcolors.ENDC
	global initialURL
	initialURL = URL
	if("www." in initialURL):
		DOMAIN = initialURL.split("www.",1)[1] 
	else:
		DOMAIN = initialURL.split("://",1)[1]

#======================================Retrieve target web information===================================
def retrieveWebInfo():
	print bcolors.OKGREEN + "-- --=[Running Whatweb..."+bcolors.ENDC
	global TargetIP 
	print "\n"
	print commands("whatweb "+str(initialURL))
	#IP = commands("whatweb "+str(initialURL)+" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'")
	IP = raw_input(bcolors.WARNING + "-- --=[Enter the Target IP Address: "+bcolors.ENDC)
	TargetIP = IP

#=====================================Checking Host and Domain Information===============================
def hostInformation():
	global DOMAIN
	stealthArt()
	print bcolors.OKGREEN + "-- -------------------=[Checking host and Domain Information]=---------------- --" + bcolors.ENDC 

	print bcolors.OKBLUE + "-- --=[Retrieving Nslookup information on " + str(TargetIP) + "..." + bcolors.WARNING
	print commands("nslookup "+str(TargetIP))
	print commands("host "+str(TargetIP))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Retrieving Whois information on " + str(TargetIP) + "..." + bcolors.WARNING
	print commands("whois "+str(TargetIP))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Retrieving exposed email information on " + str(TargetIP) + "..." + bcolors.WARNING
	print commands("theharvester -d "+ str(DOMAIN) + " -b google")
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Retrieving DNS information on " + str(TargetIP) + "..." + bcolors.WARNING
	print commands("dig -x "+ str(TargetIP))
	print commands("dnsenum " + str(TargetIP))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Retrieving OS Fingerprint information on " + str(TargetIP) + "..." + bcolors.WARNING
	print commands("xprobe2 " + str(TargetIP))
	print bcolors.ENDC+""

#======================================Checking HTTP Information=========================================
def scanInformation():
	print bcolors.OKGREEN + "-- --------------------------=[Checking HTTP Headers]=----------------------- --" + bcolors.ENDC

	print bcolors.OKBLUE + "-- --=[Checking basic HTTP header information on " + str(TargetIP) + "..." + bcolors.WARNING
	print commands(str("curl -s --insecure -I " + str(initialURL))) 
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking if X-Content options are enabled on " + str(TargetIP) + "..." + bcolors.WARNING
	print commands(str("curl -s --insecure -I " + str(initialURL) + " | egrep -i 'X-Content'")) 
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking if X-Frame options are enabled on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure -I http://" + str(TargetIP) + "| egrep -i 'X-Frame'"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking if X-XSS-Protection header is enabled on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure -I " + str(initialURL) + " | egrep -i 'X-XSS'"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking Insecure HTTP methods on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure -I -X OPTIONS " + str(initialURL) + " | grep Allow"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking if TRACE method is enabled on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure -I -X TRACE " + str(initialURL) + " | grep TRACE"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking for META tags on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure " + str(initialURL) + " | egrep -i 'meta' --color=auto"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Enumerating Software on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure -I " + str(initialURL) + " | egrep -i 'Server:|X-Powered|ASP|JSP|PHP|.NET'"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking if Strict-Transport Security is enabled on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure -I " + str(initialURL) + " | grep 'Strict-Transport-Security'"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking if HTML5 Cross-Origin resource sharing is enabled on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure -I " + str(initialURL) + " | grep 'Access-Control-Allow-Origin'"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking for robots.txt on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure " + str(initialURL) + "/robots.txt | tail -n 10"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking for sitemap.xml on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure " + str(initialURL) + "/sitemap.xml | tail -n 10"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking for cookie attributes on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure -I " + str(initialURL) + " Cookie: "))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking for ASP.NET Detailed Errors on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure " + str(initialURL) + "/%3f.jsp | egrep -i 'Error|Exception'"))
	print commands(str("curl -s --insecure " + str(initialURL) + "/test.aspx -L | egrep -i 'Error|Exception|System.Web'"))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking for ASP.NET Internal IP Disclosure on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("curl -s --insecure " + str(initialURL) + "/server.asp | tail -n 10"))
	print commands(str("curl --request HEAD --include -s --insecure -I --http1.0 --header 'Host: ' --header 'User-Agent: ' " + str(initialURL)))
	print bcolors.ENDC+""

#=============================================Enumeration================================================
def enumInformation():
	print bcolors.OKGREEN + "-- --------------------------=[Checking  Enumeration]=--------------------- --" + bcolors.ENDC
	print ""

	print bcolors.OKBLUE + "-- --=[Retrieving Directory information on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print ""
	print commands(str("dirb "+str(initialURL)))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking enum4linux on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("enum4linux " + str(TargetIP)))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking nbtscan on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print commands(str("nbtscan " + str(TargetIP)))
	print bcolors.ENDC+""

#========================================Checking Vulnerabilities========================================
def vulnInformation():
	bombArt()
	print bcolors.OKGREEN + "-- --------------------------=[Checking Vulnerabilities]=--------------------- --" + bcolors.ENDC
	print ""

	print bcolors.OKBLUE + "-- --=[Retrieving Nikto information on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print ""
	print commands(str("nikto -h " + str(initialURL)))
	print bcolors.ENDC+""
	#runTerminal(niktoCommand,testName+"Whatweb.txt")

	print bcolors.OKBLUE + "-- --=[Retrieving Basic Nmap information on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print ""
	print commands(str("nmap -sV -A " + str(TargetIP)))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Retrieving Basic Nmap vulnerability information on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print ""
	print commands(str("nmap -sV -A --script vuln " + str(TargetIP)))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Retrieving Nmap DNS information on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print ""
	print commands(str("nmap --script dns-brute " + str(TargetIP)))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Retrieving SSL information on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print ""
	print commands(str("sslscan " + str(initialURL)))
	print bcolors.ENDC+""

	print bcolors.OKBLUE + "-- --=[Checking for WAF on " + str(TargetIP) + "..." + bcolors.ENDC + bcolors.WARNING 
	print ""
	print commands(str("wafw00f -av " + str(initialURL)))
	print bcolors.ENDC+""

#=============================================Running The Script=========================================
initialize()
#==============================================That's All Folks==========================================
